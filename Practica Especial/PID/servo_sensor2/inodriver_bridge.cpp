//// ****** THIS FILE IS AUTOGENERATED ******
////
////          >>>> DO NOT CHANGE <<<<
////
/// 
///  Filename; C:\Users\Sabrina\PycharmProjects\Instrumentallantz\Practica Especial\final_pid.py
///  Source class: servo_sensor2
///  Generation timestamp: 2019-07-25T11:22:01.020290
///  Class code hash: 2aece2d1e1c6b174ff83a52b98081c3b9099e601
///
/////////////////////////////////////////////////////////////


#include "inodriver_bridge.h"

SerialCommand sCmd;

void ok() {
  Serial.println("OK");
}

void error(const char* msg) {
  Serial.print("ERROR: ");
  Serial.println(msg);
}

void error_i(int errno) {
  Serial.print("ERROR: ");
  Serial.println(errno);
}

void bridge_loop() {
  while (Serial.available() > 0) {
    sCmd.readSerial();
  }
}

void bridge_setup() {
  //// Setup callbacks for SerialCommand commands

  // All commands might return
  //    ERROR: <error message>

  // All set commands return 
  //    OK 
  // if the operation is successfull

  // All parameters are ascii encoded strings
  sCmd.addCommand("INFO?", getInfo); 

  sCmd.setDefaultHandler(unrecognized); 


  // intensidad
  // <F> float as string 

  // Getter:
  //   Brillo? 
  // Returns: <F> 
  sCmd.addCommand("Brillo?", wrapperGet_Brillo); 

  // Setter:
  //   Brillo <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("Brillo", wrapperSet_Brillo); 

  // tiempo
  // <F> float as string 

  // Getter:
  //   Tiempo? 
  // Returns: <F> 
  sCmd.addCommand("Tiempo?", wrapperGet_Tiempo); 

  // Setter:
  //   Tiempo <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("Tiempo", wrapperSet_Tiempo); 

  // angulo
  // <F> float as string 

  // Getter:
  //   Angulo? 
  // Returns: <F> 
  sCmd.addCommand("Angulo?", wrapperGet_Angulo); 

  // Setter:
  //   Angulo <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("Angulo", wrapperSet_Angulo); 
}

//// Code 

void getInfo() {
  Serial.print("servo_sensor2,");
  Serial.println(COMPILE_DATE_TIME);
}

void unrecognized(const char *command) {
  error("Unknown command");
}
//// Auto generated Feat and DictFeat Code
// COMMAND: Brillo, FEAT: intensidad

void wrapperGet_Brillo() { 
  Serial.println(get_Brillo()); 
}; 


void wrapperSet_Brillo() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_Brillo(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: Tiempo, FEAT: tiempo

void wrapperGet_Tiempo() { 
  Serial.println(get_Tiempo()); 
}; 


void wrapperSet_Tiempo() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_Tiempo(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: Angulo, FEAT: angulo

void wrapperGet_Angulo() { 
  Serial.println(get_Angulo()); 
}; 


void wrapperSet_Angulo() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_Angulo(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



